# 1. Greedy Algorithm: find_coins_greedy

def find_coins_greedy(amount, coins=[50, 25, 10, 5, 2, 1]):
    result = {}
    for coin in coins:
        if amount >= coin:
            count = amount // coin
            amount -= count * coin
            result[coin] = count
    return result
print(find_coins_greedy(113))


# 2. Dynamic Programming Algorithm: find_min_coins

def find_min_coins(amount, coins=[50, 25, 10, 5, 2, 1]):
    # Initialize the table with infinity (large value) and 0 for the 0 amount
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0

    # Table to track the coins used to make up the amount
    coin_used = [-1] * (amount + 1)

    for coin in coins:
        for x in range(coin, amount + 1):
            if dp[x - coin] + 1 < dp[x]:
                dp[x] = dp[x - coin] + 1
                coin_used[x] = coin

    # Backtrack to find the coins used
    result = {}
    while amount > 0:
        coin = coin_used[amount]
        if coin in result:
            result[coin] += 1
        else:
            result[coin] = 1
        amount -= coin

    return result

print(find_min_coins(113))
